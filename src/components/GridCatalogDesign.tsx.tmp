import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Badge } from "./ui/badge";
import { Card } from "./ui/card";
import { Search, ExternalLink, Disc3, Disc, CassetteTape } from "lucide-react";
import { ImageWithFallback } from "./figma/ImageWithFallback";
import { useCallback, useState, useEffect } from "react";
import { apiClient } from "@/lib/api/client";

interface Album {
  id: number;
  title: string;
  year?: string;
  type: string;
  cover_image: string;
  thumb: string;
}

export function GridCatalogDesign() {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<Album[]>([]);
  const [featuredAlbums, setFeaturedAlbums] = useState<Album[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [isLoadingFeatured, setIsLoadingFeatured] = useState(true);

  // Fetch featured albums on component mount
  useEffect(() => {
    const fetchFeaturedAlbums = async () => {
      try {
        const response = await apiClient<{ results: Album[] }>('/api/discogs/featured');
        setFeaturedAlbums(response.results);
      } catch (error) {
        console.error('Failed to fetch featured albums:', error);
      } finally {
        setIsLoadingFeatured(false);
      }
    };

    fetchFeaturedAlbums();
  }, []);

  const handleSearch = useCallback(async (query: string) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    try {
      const response = await apiClient<{ results: Album[] }>(`/api/discogs/search?q=${encodeURIComponent(query)}`);
      setSearchResults(response.results);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setIsSearching(false);
    }
  }, []);

  return (
    <div className="min-h-screen bg-zinc-950 text-white font-mono">
      {/* Header */}
      <div className="border-b border-zinc-800 bg-zinc-900/50 backdrop-blur sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-xl mb-1">spotify</h1>
              <p className="text-zinc-500 text-sm">your_digital_library.to_analog()</p>
            </div>
            <Button className="bg-green-500 hover:bg-green-600 text-black">
              CONNECT_SPOTIFY
            </Button>
          </div>
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-500" size={18} />
            <Input 
              placeholder="search_albums()" 
              className="bg-zinc-900 border-zinc-800 pl-10 font-mono text-zinc-300 placeholder:text-zinc-600"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  handleSearch(searchQuery);
                }
              }}
            />
          </div>
        </div>
      </div>

      {/* Grid */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-6">
          <p className="text-zinc-500 text-sm">
            {isLoadingFeatured ? (
              "// Loading featured albums..."
            ) : (
              `// Found ${searchResults.length || featuredAlbums.length} albums ${searchResults.length ? 'in search' : 'featured'}`
            )}
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {isLoadingFeatured ? (
            // Loading skeleton
            [...Array(6)].map((_, idx) => (
              <Card key={idx} className="bg-zinc-900 border-zinc-800 overflow-hidden hover:border-zinc-700 transition-colors animate-pulse">
                <div className="aspect-square bg-zinc-800" />
                <div className="p-4">
                  <div className="h-4 bg-zinc-800 rounded w-3/4 mb-2" />
                  <div className="h-3 bg-zinc-800 rounded w-1/2" />
                </div>
              </Card>
            ))
          ) : (
            (searchResults.length > 0 ? searchResults : featuredAlbums).map((album) => (
              <Card key={album.id} className="bg-zinc-900 border-zinc-800 overflow-hidden hover:border-zinc-700 transition-colors">
                <div className="aspect-square relative overflow-hidden bg-zinc-800">
                  <ImageWithFallback 
                    src={album.cover_image || album.thumb} 
                    alt={album.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute top-2 right-2">
                    <Badge variant="secondary" className="bg-black/70 text-white border-zinc-700 font-mono text-xs">
                      {album.year || 'N/A'}
                    </Badge>
                  </div>
                </div>
                <div className="p-4">
                  <h3 className="mb-1 truncate">{album.title}</h3>
                  <p className="text-sm text-zinc-500 mb-4 truncate">
                    {album.type}
                  </p>
                  
                  <div className="space-y-2">
                    {/* View on Discogs button */}
                    <a
                      href={`https://www.discogs.com/release/${album.id}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="w-full flex items-center justify-between p-2 bg-zinc-800 hover:bg-zinc-750 border border-zinc-700 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        <ExternalLink size={14} />
                        <span className="text-sm">View on Discogs</span>
                      </div>
                    </a>
                    
                    {/* Format indicators */}
                    <div className="flex gap-2 mt-2">
                      <Badge variant="secondary" className="bg-zinc-800">
                        <Disc3 size={12} className="mr-1" />
                        Vinyl
                      </Badge>
                      <Badge variant="secondary" className="bg-zinc-800">
                        <CassetteTape size={12} className="mr-1" />
                        Physical
                      </Badge>
                    </div>
                  </div>
                </div>
              </Card>
            ))
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="border-t border-zinc-800 mt-12">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <p className="text-zinc-600 text-sm">// Powered by Spotify API + Discogs</p>
        </div>
      </div>
    </div>
  );
}